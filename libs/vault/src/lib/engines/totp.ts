import { AbstractVaultClient } from "../VaultClient";
import {
    ITotpCreateOptions,
    ITotpCreateOptionsGenerate,
    ITotpCreateResponseExported,
    ITotpGenerateCodeResponse,
    ITotpListResponse,
    ITotpReadResponse,
    ITotpValidateCodeResponse,
} from "./totp_types";
import { Vault } from "../Vault";
import { createCheckers } from "ts-interface-checker";
import totpTi from "./totp_types-ti";
import { validateKeyName } from "../util";

const tiChecker = createCheckers(totpTi);

/**
 * Totp client
 * @see https://www.vaultproject.io/api/secret/totp/index.html
 */
export class TotpVaultClient extends AbstractVaultClient {
    public constructor(vault: Vault, mountPoint: string = "/totp") {
        super(vault, mountPoint);
    }

    /**
     * @see https://www.vaultproject.io/api/secret/totp/index.html#create-key
     * @param key
     * @param options
     * @param options.generate Specifies if a key should be generated by Vault or if a key is being passed from another service.
     * @param options.exported? Specifies if a QR code and url are returned upon generating a key. Only used if generate is true.
     * @param options.key_size? Specifies the size in bytes of the Vault generated key. Only used if generate is true.
     * @param options.issuer Specifies the name of the keyâ€™s issuing organization.
     * @param options.account_name Specifies the name of the account associated with the key.
     * @param options.period? Specifies the length of time in seconds used to generate a counter for the TOTP code calculation.
     * @param options.algorithm? Specifies the hashing algorithm used to generate the TOTP code.
     * @param options.digits? Specifies the number of digits in the generated TOTP code. This value can be set to 6 or 8.
     * @param options.skew? Specifies the number of delay periods that are allowed when validating a TOTP code. This value can be either 0 or 1. Only used if generate is true.
     * @param options.qr_size? Specifies the pixel size of the square QR code when generating a new key. Only used if generate is true and exported is true. If this value is 0, a QR code will not be returned.
     */
    public async create(key: string, options: ITotpCreateOptionsGenerate & { exported: true }): Promise<ITotpCreateResponseExported>;
    public async create(key: string, options: ITotpCreateOptions): Promise<void>;
    public async create(key: string, options: ITotpCreateOptions): Promise<ITotpCreateResponseExported | void> {
        validateKeyName(key);
        return this.rawWrite(["keys", key], options).then((res) => {
            if (options.generate && options.exported) {
                tiChecker.ITotpCreateResponseExported.check(res);
            }
            return res;
        });
    }

    /**
     * @see https://www.vaultproject.io/api/secret/totp/index.html#read-key
     * @param key
     */
    public async read(key: string): Promise<ITotpReadResponse> {
        validateKeyName(key);
        return this.rawRead(["keys", key]).then((res) => {
            tiChecker.ITotpReadResponse.check(res);
            return res;
        });
    }

    /**
     * @see https://www.vaultproject.io/api/secret/totp/index.html#list-keys
     */
    public async list(): Promise<ITotpListResponse> {
        return this.rawList(["keys"]).then((res) => {
            tiChecker.ITotpListResponse.check(res);
            return res;
        });
    }

    /**
     * @see https://www.vaultproject.io/api/secret/totp/index.html#delete-key
     * @param key
     */
    public async delete(key: string): Promise<void> {
        validateKeyName(key);
        return this.rawDelete(["keys", key]);
    }

    /**
     * @see https://www.vaultproject.io/api/secret/totp/index.html#generate-code
     * @param key
     */
    public async generateCode(key: string): Promise<ITotpGenerateCodeResponse> {
        validateKeyName(key);
        return this.rawRead(["code", key]).then((res) => {
            tiChecker.ITotpGenerateCodeResponse.check(res);
            return res;
        });
    }

    /**
     * @see https://www.vaultproject.io/api/secret/totp/index.html#validate-code
     * @param key
     * @param code
     */
    public async validateCode(key: string, code: string): Promise<ITotpValidateCodeResponse> {
        validateKeyName(key);
        return this.rawWrite(["code", key], {
            code,
        }).then((res) => {
            tiChecker.ITotpValidateCodeResponse.check(res);
            return res;
        });
    }
}
