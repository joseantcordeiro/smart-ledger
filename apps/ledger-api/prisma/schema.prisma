generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  address  String  @unique @db.VarChar
	name 		 String  @unique @db.VarChar
	active   Boolean @default(false)
	meta		 metadata[]
}

model metadata {
	account String 	  @db.VarChar
	key 		String 	  @db.VarChar
	value 	String 	  @db.VarChar
	acc		  accounts? @relation(fields: [account], references: [name], onDelete: Cascade)

	@@unique([account, key])
}

model idempotency {
  key          String  @id @db.VarChar
  date         String? @db.VarChar
  status_code  Int?
  headers      String? @db.VarChar
  body         String? @db.VarChar
  request_hash String? @db.VarChar
}

model log {
  id   BigInt    @id @default(autoincrement())
  type String?   @db.VarChar
  hash String?   @db.VarChar
  date DateTime? @db.Timestamptz(6)
  data Json?

}

model mapping {
  mapping_id String @id @unique @db.VarChar
  mapping    String @db.VarChar

}

model transactions {
  id                  BigInt    @id @default(autoincrement())
  timestamp           DateTime? @db.Timestamptz(6)
  reference           String?   @unique @db.VarChar
  hash                String?   @db.VarChar
  postings            Json?
  metadata            Json?     @default("{}")
  pre_commit_volumes  Json?
  post_commit_volumes Json?

  @@index([postings], map: "postings_addresses", type: Gin)
}

model volumes {
  account String  @db.VarChar
  asset   String  @db.VarChar
  input   Decimal @db.Decimal
  output  Decimal @db.Decimal

  @@unique([account, asset])

}
